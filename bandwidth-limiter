#!/usr/bin/python 

"""
    Copyright 2011 Greg L. Turnquist

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

"""
This script is used to turn on/off bandwidth limits to simulate running on a slower network.
So far, it only works on Mac OSX.
"""

import subprocess

from optparse import OptionParser

def execute_cmds(cmds, line_break=False):
    "Convert an array of string commands into a callable set of commands"

    for cmd in cmds:
        split_cmd = cmd.split(" ")
        #print(split_cmd)  # Useful for debugging the commands
        subprocess.call(split_cmd)
        if line_break: print("------------------------------------")

def show_bandwidth_limits():
    "List the ipfw settings as well as the pipes."

    cmds = ["ipfw list",
           "ipfw pipe list"]
    execute_cmds(cmds, line_break=True)

def start_bandwidth_limits(bw="64Kbit/s", q="10Kbytes", port=None):
    "Turn on the ipfw bandwidth limits."

    cmds = ["ipfw add pipe 1 ip from any to any out",
           "ipfw add pipe 2 ip from any to any in",
           "ipfw pipe 1 config bw %s queue %s" % (bw, q),
           "ipfw pipe 2 config bw %s queue %s" % (bw, q)]
    if port: # if the port option is specified, replace the pipe commands with port specifics
        cmds[0] = "ipfw add pipe 1 ip from any to any %s out" % port
        cmds[1] = "ipfw add pipe 2 ip from any to any %s out" % port
    execute_cmds(cmds)

def stop_bandwidth_limits():
    "Flush the rules and delete the pipes."

    cmds = ["ipfw -q flush",
           "ipfw pipe 1 delete",
           "ipfw pipe 2 delete"]
    execute_cmds(cmds)

if __name__ == "__main__":
    "Setup an option parser to execute the commands."

    parser = OptionParser()
    parser.add_option("--start", dest="start", help="turn on bandwidth limits", action="store_true")
    parser.add_option("--stop", dest="stop", help="turn off bandwidth limits", action="store_true")
    parser.add_option("--bandwidth", dest="bw", help="specify bandwidth, measured in [K|M]{bit/s|Byte/s} (default: %default)", action="store", default="256Kbit/sec")
    parser.add_option("--queue", dest="q", help="queue {slots | sizeKbytes} (default: %default)", action="store", default="10Kbytes")
    parser.add_option("--list", dest="list", help="list current status", action="store_true")
    parser.add_option("--port", dest="port", help="only apply to a single port", action="store")
    (options, args) = parser.parse_args()

    if options.start and options.stop:
        parser.error("--start and --stop are mutually exclusive")
    elif options.list:
        print("Showing current state of bandwidth limits")
        print("=========================================")
        show_bandwidth_limits()
    elif options.start:
        if options.port:
            start_bandwidth_limits(options.bw, options.q, options.port)
        else:
            start_bandwidth_limits(options.bw, options.q)
    elif options.stop:
        stop_bandwidth_limits()
    else:
        parser.error("You didn't pick --start, --stop, --list, or --help")

